package org.ulpmm.univrav.test;

import static org.junit.Assert.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.sql.DataSource;
import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.ulpmm.univrav.dao.DaoException;
import org.ulpmm.univrav.dao.DatabaseImpl;
import org.ulpmm.univrav.entities.Amphi;
import org.ulpmm.univrav.entities.Building;
import org.ulpmm.univrav.entities.Course;
import org.ulpmm.univrav.entities.Discipline;
import org.ulpmm.univrav.entities.Job;
import org.ulpmm.univrav.entities.Level;
import org.ulpmm.univrav.entities.LogUserAction;
import org.ulpmm.univrav.entities.Selection;
import org.ulpmm.univrav.entities.Slide;
import org.ulpmm.univrav.entities.Tag;
import org.ulpmm.univrav.entities.User;

public class DatabaseImplTest {
	
	protected DatabaseImpl dbi;
	protected DataSource datasrc;
	
	@Before
	public void setUp() throws Exception {
		// create hsqldb base
	    JDBCDataSource ds = new JDBCDataSource();
	    ds.setDatabase("jdbc:hsqldb:mem:testdb");
	    ds.setUser("sa");
	    ds.setPassword("");
	    // create datasource and databaseimpl
	    datasrc = ds;
	    dbi = new DatabaseImpl(datasrc);
	    //create tables
		Connection c = null;
		Statement st = null;
		try {
			c = datasrc.getConnection();
			st = c.createStatement();
			//set sql syntax
			st.executeUpdate("SET DATABASE SQL SYNTAX PGS TRUE");
			//amphi
			st.executeUpdate("CREATE SEQUENCE amphi_amphiid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE amphi (amphiid INTEGER GENERATED BY DEFAULT AS SEQUENCE amphi_amphiid_seq PRIMARY KEY,buildingid INTEGER NOT NULL,name VARCHAR(255) NOT NULL,ipaddress VARCHAR(255) NOT NULL,status BOOLEAN NOT NULL,gmapurl VARCHAR(255),version VARCHAR(255),restrictionuds BOOLEAN DEFAULT false NOT NULL);");
			//building
			st.executeUpdate("CREATE SEQUENCE building_buildingid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE building (buildingid INTEGER GENERATED BY DEFAULT AS SEQUENCE building_buildingid_seq PRIMARY KEY,name VARCHAR(255) NOT NULL,imagefile VARCHAR(255) NOT NULL);");
			//discipline
			st.executeUpdate("CREATE SEQUENCE discipline_disciplineid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE discipline (disciplineid INTEGER GENERATED BY DEFAULT AS SEQUENCE discipline_disciplineid_seq PRIMARY KEY,codecomp VARCHAR(255) NOT NULL,namecomp VARCHAR(255),codedom VARCHAR(255),namedom VARCHAR(255));");
			//job
			st.executeUpdate("CREATE SEQUENCE job_jobid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE job (jobid INTEGER GENERATED BY DEFAULT AS SEQUENCE job_jobid_seq PRIMARY KEY,courseid INTEGER NOT NULL,status VARCHAR(255) NOT NULL,mediatype INTEGER NOT NULL,coursetype VARCHAR(255) NOT NULL,mediapath VARCHAR(255),extension VARCHAR(255) NOT NULL);");
			//level
			st.executeUpdate("CREATE SEQUENCE level_levelid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE level (levelid INTEGER GENERATED BY DEFAULT AS SEQUENCE level_levelid_seq PRIMARY KEY,code VARCHAR(255) NOT NULL,name VARCHAR(255));");
			st.executeUpdate("INSERT INTO level (levelid, code, name) VALUES (1, 'O0', 'Autres');");
			st.executeUpdate("INSERT INTO level (levelid, code, name) VALUES (2, 'C0', 'Conférence');");
			//selection
			st.executeUpdate("CREATE SEQUENCE selection_selectionid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE selection (position INTEGER GENERATED BY DEFAULT AS SEQUENCE selection_selectionid_seq PRIMARY KEY,idcourseselection INTEGER,formationcollection VARCHAR(255));");
			//slide
			st.executeUpdate("CREATE SEQUENCE slide_slideid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE slide (slideid INTEGER GENERATED BY DEFAULT AS SEQUENCE slide_slideid_seq,courseid INTEGER NOT NULL,slidetime INTEGER NOT NULL);");
			//tag
			st.executeUpdate("CREATE SEQUENCE tag_tagid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE tag (tagid INTEGER GENERATED BY DEFAULT AS SEQUENCE tag_tagid_seq,tag VARCHAR(255),courseid INTEGER);");
			//user
			st.executeUpdate("CREATE SEQUENCE user_userid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE \"user\" (userid INTEGER GENERATED BY DEFAULT AS SEQUENCE user_userid_seq,login VARCHAR(255) NOT NULL,email VARCHAR(255),firstname VARCHAR(255),lastname VARCHAR(255),profile VARCHAR(255),establishment VARCHAR(255),password VARCHAR(255),passwordtype VARCHAR(255),type VARCHAR(255),activate BOOLEAN,etp VARCHAR(255),resetcode VARCHAR(255),resetcodetype VARCHAR(255),dateresetcode TIMESTAMP,institute VARCHAR(255));");
			//course
			st.executeUpdate("CREATE SEQUENCE course_courseid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE course (courseid INTEGER GENERATED BY DEFAULT AS SEQUENCE course_courseid_seq,date TIMESTAMP NOT NULL,type VARCHAR(255),title VARCHAR(255),description VARCHAR(255),formation VARCHAR(255),name VARCHAR(255),firstname VARCHAR(255),ipaddress VARCHAR(255) NOT NULL,duration INTEGER NOT NULL,genre VARCHAR(255),visible BOOLEAN DEFAULT true,consultations INTEGER DEFAULT 0,timing VARCHAR(255) DEFAULT 'n-1',userid INTEGER,adddocname VARCHAR(255),download BOOLEAN DEFAULT true NOT NULL,restrictionuds BOOLEAN DEFAULT false NOT NULL,mediatype INTEGER,volume SMALLINT DEFAULT 1 NOT NULL,recorddate TIMESTAMP,slidesoffset INTEGER);");
			//log_user_action
			//slide
			st.executeUpdate("CREATE SEQUENCE log_user_action_logid_seq AS INTEGER START WITH 1 INCREMENT BY 1;");
			st.executeUpdate("CREATE TABLE log_user_action (logid INTEGER GENERATED BY DEFAULT AS SEQUENCE log_user_action_logid_seq,date TIMESTAMP NOT NULL,userid INTEGER,courseid INTEGER,action VARCHAR(255) NOT NULL, url VARCHAR(255) NOT NULL, type VARCHAR(255),information VARCHAR(255));");

		} catch (SQLException e) { e.printStackTrace(); }
		finally {
			try {
				st.close();
				c.close();
			} catch (SQLException e) { e.printStackTrace(); }
		}
	    
	}
	
	@After
    public void tearDown() throws Exception {
        // shutdown hsqldb
		Connection c = null;
		Statement st = null;
		try {
			c = datasrc.getConnection();
			st = c.createStatement();
			st.execute("SHUTDOWN");
		} catch (SQLException e) { e.printStackTrace(); }
		finally {
			try {
				st.close();
				c.close();
			} catch (SQLException e) { e.printStackTrace(); }
		}
    }

	
	@Test
	public void testAmphiMethods() {
		// Method addAmphi
		Amphi amphi_added = new Amphi(1, 1, "amphi1", "127.0.0.1", false, "blank", "1.0", false);		
		dbi.addAmphi(amphi_added);
		// Method getAmphi(Int)
		Amphi amphi_by_id = dbi.getAmphi(1);
		assertTrue(amphi_added.equals(amphi_by_id));
		// Method getAmphi(String)
		Amphi amphi_by_ip = dbi.getAmphi("127.0.0.1");
		assertTrue(amphi_added.equals(amphi_by_ip));
		// Method setAmphiStatus
		dbi.setAmphiStatus("127.0.0.1", true);
		Amphi amphi_status = dbi.getAmphi("127.0.0.1");
		assertTrue(amphi_status.isStatus());
		//Method modifyAmphi
		Course course_added = new Course(1, new Timestamp(0), "audio", "titre", "desc", "CH-00", "dupond", "jean", "127.0.0.1", 3600, "pass", true, 3, "n-1", null, null, true, false, 7, (short) 1, new Timestamp(0), null);
		dbi.addCourse(course_added);
		amphi_added.setIpAddress("127.0.0.2");
		dbi.modifyAmphi(amphi_added, "127.0.0.1");
		amphi_by_id = dbi.getAmphi(1);
		assertEquals("127.0.0.2", amphi_by_id.getIpAddress());
		Course couse_by_id = dbi.getCourse(1);
		assertEquals("127.0.0.2", couse_by_id.getIpaddress());
		// Method deleteAmphi
		dbi.deleteAmphi(1);
		Amphi amphi_deleted = dbi.getAmphi(1);
		assertNull(amphi_deleted);
		
		// Warning : 
		// Methods not supported by HSQLDB : getAmphis(int)
	}
	
	@Test
	public void testBuildingMethods() {
		//Method addBuilding
		Building building_added = new Building(1, "building1", "blank");
		dbi.addBuilding(building_added);
		// Method getBuilding
		Building building_by_id = dbi.getBuilding(1);
		assertTrue(building_added.equals(building_by_id));
		// Method getBuildingName
		Amphi amphi_added = new Amphi(1, 1, "amphi1", "127.0.0.1", false, "blank", "1.0", false);		
		dbi.addAmphi(amphi_added);
		String building_name = dbi.getBuildingName("127.0.0.1");
		assertEquals("building1", building_name);
		// Method modifyBuilding
		building_by_id.setName("newname");
		dbi.modifyBuilding(building_by_id);
		building_by_id = dbi.getBuilding(1);
		assertEquals("newname", building_by_id.getName());
		// Method deleteBuilding
		dbi.deleteBuilding(1);
		Building building_deleted = null;
		try { building_deleted = dbi.getBuilding(1); }
		catch(DaoException e) {}
		assertNull(building_deleted);
	
		// Warning : 
		// Methods not supported by HSQLDB : getBuildings
	}
	
	@Test
	public void testDisciplineMethods() {
		// Method addDiscipline
		Discipline discipline_added = new Discipline(1, "CH", "Faculté de Chimie", "SF", "Sciences fondamentales");
		dbi.addDiscipline(discipline_added);
		// Method getDiscipline
		Discipline discipline_by_id = dbi.getDiscipline(1);
		assertTrue(discipline_added.equals(discipline_by_id));
		// Method getAllDiscipline
		Discipline discipline_added2 = new Discipline(2, "00", "Autres", "O", "Autres");
		dbi.addDiscipline(discipline_added2);
		List<Discipline> lst = dbi.getAllDiscipline();
		assertEquals(2, lst.size());
		assertTrue(discipline_added2.equals(lst.get(0)));
		assertTrue(discipline_added.equals(lst.get(1)));
		// Method modifyDiscipline
		discipline_by_id.setNamedom("newname");
		dbi.modifyDiscipline(discipline_by_id);
		discipline_by_id = dbi.getDiscipline(1);
		assertEquals("newname", discipline_by_id.getNamedom());
		//Method getFormationFullName
		String formation = dbi.getFormationFullName("CH-00");
		assertEquals("Faculté de Chimie", formation);
		// Method deleteDiscipline
		dbi.deleteDiscipline(1);
		Discipline discipline_deleted = dbi.getDiscipline(1);
		assertNull(discipline_deleted);
				
		// Warning : 
		// Methods not supported by HSQLDB : getNextDisciplineId
	}
	
	@Test
	public void testJobMethods() {
		// Method addJob
		Job job_added = new Job(1, 1, "waiting", 2183, "MUV", "1/00/00/01/33", "mov");
		dbi.addJob(job_added);
		// Method getJob
		Job job_by_id = dbi.getJob(1, "MUV");
		assertTrue(job_added.equals(job_by_id));
		// Method getAllJobs
		Job job_added2 = new Job(2, 2, "done", 2183, "MUV", "1/00/00/01/32", "avi");
		dbi.addJob(job_added2);
		List<Job> lst = dbi.getAllJobs();
		assertEquals(2, lst.size());
		assertTrue(job_added2.equals(lst.get(0)));
		assertTrue(job_added.equals(lst.get(1)));
		// Method modifyJob
		job_by_id.setExtension("mp4");
		dbi.modifyJob(job_by_id);
		job_by_id = dbi.getJob(1, "MUV");
		assertEquals("mp4", job_by_id.getExtension());
		// Method modifyJobStatus
		dbi.modifyJobStatus(1, "done", "MUV");
		job_by_id = dbi.getJob(1, "MUV");
		assertEquals("done", job_by_id.getStatus());
				
		// Warning : 
		// Methods not supported by HSQLDB : getNextJobId
	}
	
	@Test
	public void testLevelMethods() {
		//Method getAllLevels
		Level lvl1 = new Level(1, "O0", "Autres");
		Level lvl2 = new Level(2, "C0", "Conférence");
		List<Level> lst = dbi.getAllLevels();
		assertEquals(2, lst.size());
		assertTrue(lvl1.equals(lst.get(0)));
		assertTrue(lvl2.equals(lst.get(1)));
		
		Level mylevel = dbi.getLevelByCode("C0");
		assertTrue(lvl2.equals(mylevel));
	}
	
	@Test
	public void testSelectionMethods() {
		//Method addSelection
		Selection selection_added = new Selection(1, 1, "00-O0");
		dbi.addSelection(selection_added);
		//Method getSelection
		Selection selection_by_id = dbi.getSelection(1);
		assertTrue(selection_added.equals(selection_by_id));
		//Method getAllSelections
		Selection selection_added2 = new Selection(2, 2, "");
		dbi.addSelection(selection_added2);
		List<Selection> lst = dbi.getAllSelections();
		assertEquals(2, lst.size());
		assertTrue(selection_added.equals(lst.get(0)));
		assertTrue(selection_added2.equals(lst.get(1)));
		//Method modifySelection
		selection_by_id.setIdcourseselection(3);
		dbi.modifySelection(selection_by_id);
		selection_by_id = dbi.getSelection(1);
		assertEquals(3, (int) selection_by_id.getIdcourseselection());
		//Method deleteSelection
		dbi.deleteSelection(1);
		selection_by_id = dbi.getSelection(1);
		assertNull(selection_by_id);
	}
	
	@Test
	public void testSlideMethods() {
		//Method addSlide
		Slide slide_added = new Slide(1, 10);
		dbi.addSlide(slide_added);
		Slide slide_added2 = new Slide(1, 20);
		dbi.addSlide(slide_added2);
		//Method getSlides
		List<Slide> lst = dbi.getSlides(1);
		assertTrue(slide_added.equals(lst.get(0)));
		assertTrue(slide_added2.equals(lst.get(1)));
	}
		
	@Test
	public void testUserMethods() {
		//Method addUser
		User user_added = new User(1, "user", "noreply@noreply.com", "Jean", "Dupont", "employee", "UDS", "local", true, "etp1", "institute1");
		dbi.addUser(user_added);
		//Method getUser(String)
		User user_by_login = dbi.getUser("user");
		assertTrue(user_added.equals(user_by_login));
		//Method getUser(Int)
		User user_by_id = dbi.getUser(1);
		assertTrue(user_added.equals(user_by_id));
		//Method modifyUserPassword
		dbi.modifyUserPassword("user", "448ed7416fce2cb66c285d182b1ba3df1e90016d", "sha");
		user_by_login = dbi.getUser("user");
		assertTrue(user_added.equals(user_by_login)); // no change because password is not in the object
		//Method modifyUserResetCode
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		Timestamp datemax = new Timestamp(cal.getTime().getTime());
		dbi.modifyUserResetCode("user", "500ed7416fce2cb66c285d182b1ba3df1e90016d", "sha", datemax);
		user_by_login = dbi.getUser("user");
		assertTrue(user_added.equals(user_by_login)); // no change because password is not in the object
		//Method getUserLocal
		User user_local = dbi.getUserLocal("user", "448ed7416fce2cb66c285d182b1ba3df1e90016d");
		assertTrue(user_added.equals(user_local));
		//Method getUserLocalByResetCode
		User user_reset = dbi.getUserLocalByResetCode("500ed7416fce2cb66c285d182b1ba3df1e90016d");
		assertTrue(user_added.equals(user_reset));
		//Method addUser
		User user_added2 = new User(2, "user2", "noreply2@noreply.com", "Jean2", "Dupont2", "employee", "UDS", "ldap", true, "etp2", "institute2");
		dbi.addUser(user_added2);
		//Method getAllUsers
		List<User> lst = dbi.getAllUsers(10, 0);
		assertEquals(2, lst.size());
		assertTrue(user_added.equals(lst.get(0)));
		assertTrue(user_added2.equals(lst.get(1)));
		//Method modifyUser
		user_added.setLastname("newname");
		dbi.modifyUser(user_added);
		user_by_id = dbi.getUser(1);
		assertEquals("newname", user_added.getLastname());
		//Method deleteUser
		dbi.deleteUser(1);
		user_by_id = dbi.getUser(1);
		assertNull(user_by_id);

		// Warning : 
		// Methods not supported by HSQLDB : getNextUserId, getUsersNumber
	}
	
	@Test
	public void testCourseMethods() {
		//Method addCourse
		User user_added = new User(1, "user", "noreply@noreply.com", "Jean", "Dupont", "employee", "UDS", "local", true, "etp1", "institute2");
		dbi.addUser(user_added);
		Course course_added = new Course(1, new Timestamp(0), "audio", "titre", "desc", "CH-00", "Dupont", "Jean", "127.0.0.1", 3600, "pass", true, 3, "n-1", 1, null, true, false, 7, (short) 1, new Timestamp(0), 0);
		dbi.addCourse(course_added);
		//Method getCourse(Int)
		Course course_by_id = dbi.getCourse(1);
		assertTrue(course_added.equals(course_by_id));
		//Method getCourse(Int,String)
		Course course_by_pass = dbi.getCourse(1,"pass");
		assertTrue(course_added.equals(course_by_pass));
		//Method getAllCourses
		Course course_added2 = new Course(2, new Timestamp(0), "audio", "titre2", "desc2", "CH-C0", "Dupont", "Jean", "127.0.0.1", 3600, "pass", true, 3, "n-1", 1, null, true, false, 7, (short) 1, new Timestamp(0), 0);
		dbi.addCourse(course_added2);
		List<Course> lst = dbi.getAllCourses(false, false, 10);
		assertEquals(2, lst.size());
		assertTrue(course_added.equals(lst.get(0)));
		assertTrue(course_added2.equals(lst.get(1)));
		//Method getTracks
		HashMap<String, String> params = new HashMap<String, String>();
		params.put("authorName", "Dupont");
		lst = dbi.getTracks(params);
		assertEquals(2, lst.size());
		assertTrue(course_added2.equals(lst.get(0)));
		assertTrue(course_added.equals(lst.get(1)));
		//Method getCoursesByFormation
		lst = dbi.getCoursesByFormation("CH-00", 10);
		assertEquals(1, lst.size());
		assertTrue(course_added.equals(lst.get(0)));
		//Method modifyCourse
		course_added.setTitle("newtitle");
		dbi.modifyCourse(course_added);
		course_by_id = dbi.getCourse(1);
		assertEquals("newtitle", course_by_id.getTitle());
		//Method modifyCourseMediatype
		dbi.modifyCourseMediatype(1, 3);
		course_by_id = dbi.getCourse(1);
		assertEquals(3, course_by_id.getmediatype());
		//Method getMediaType
		int mediatype = dbi.getMediaType(1);
		assertEquals(3, mediatype);
		//Method incrementConsultations
		dbi.incrementConsultations(course_by_id);
		course_by_id = dbi.getCourse(1);
		assertEquals(4, course_by_id.getConsultations());
		//Method getCoursesByUser
		lst = dbi.getCoursesByUser(user_added, 10, 0, true);
		assertEquals(2, lst.size());
		assertEquals(course_added2.getCourseid(),lst.get(0).getCourseid());
		assertEquals(course_added.getCourseid(),lst.get(1).getCourseid());
		//Method getFormations
		List<String> lst_form = dbi.getFormations();
		assertEquals("CH-00", lst_form.get(0));
		assertEquals("CH-C0", lst_form.get(1));
		//Method deleteCourse
		dbi.deleteCourse(1);
		Course course_deleted = null;
		try { course_deleted = dbi.getCourse(1); }
		catch(DaoException e) {}
		assertNull(course_deleted);
		
		// Warning : 
		// Methods not supported by HSQLDB : getNLastCourses, getCourses(Int,Int,String,String,String),getCourses(HashMapOf,String,String,Int,Int,String,String,String),
		// getCoursesByAuthor, getCourseNumber(String,String,String), getCourseNumber, getCourseNumber(HashMapOf,String,String,String,String,String),
		// getCourseNumber(User),getCourseNumber(ListOf,String,String,String,String),getTestsToDelete, getTests, getTestNumber,deleteTests,
		// hideTests,getNextCoursId,getCoursesByTags,getNSelectionCourses,getNFormationCourses,getTeachers,getAllTeachers,getTeacherFullName
	}
	
	@Test
	public void testTagMethods() {
		//Method addTag
		Tag tag_added = new Tag(1, "tag1", 1);
		Tag tag_added2 = new Tag(2, "tag2", 1);
		dbi.addTag(tag_added);	
		dbi.addTag(tag_added2);
		//Method getTagsByCourse
		User user_added = new User(1, "user", "noreply@noreply.com", "Jean", "Dupont", "employee", "UDS", "local", true, "etp1", "institute1");
		dbi.addUser(user_added);
		Course course_added = new Course(1, new Timestamp(0), "audio", "titre", "desc", "CH-00", "Dupont", "Jean", "127.0.0.1", 3600, "pass", true, 3, "n-1", 1, null, true, false, 7, (short) 1, new Timestamp(0), 0);
		dbi.addCourse(course_added);
		List<Tag> lst = dbi.getTagsByCourse(course_added);
		assertEquals(tag_added, lst.get(0));
		assertEquals(tag_added2, lst.get(1));
		//Method getAllTags
		List<String> lststr = dbi.getAllTags();
		assertEquals("tag1", lststr.get(0));
		assertEquals("tag2", lststr.get(1));
		//Method deleteTag
		dbi.deleteTag(1);
		List<Tag> lst_tag_deleted = dbi.getTagsByCourse(course_added);
		assertEquals(0, lst_tag_deleted.size());
		
		// Warning : 
		// Methods not supported by HSQLDB : getMostPopularTags
	}
	
	@Test
	public void testLogUserActionMethods() {
		//Method addLogUserAction
		LogUserAction log1 = new LogUserAction(new Timestamp(0), 1, 1, "home", "/avc/home", LogUserAction.typeAccess, "accueil");
		LogUserAction log2 = new LogUserAction(new Timestamp(0), null, null, "recorded", "/avc/recorded", LogUserAction.typeAccess, null);
		dbi.addLogUserAction(log1);
		dbi.addLogUserAction(log2);
		//Method getLogUserActionByUser
		List<LogUserAction> l1 = dbi.getLogUserActionByUser(1);
		List<LogUserAction> l2 = dbi.getLogUserActionByUser(null);
		//Tests
		assertEquals(log1, l1.get(0));
		assertEquals(log2, l2.get(0));
	}

}
